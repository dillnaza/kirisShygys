package KirisShygys.service.impl;

import KirisShygys.dto.CategoryRequest;
import KirisShygys.entity.Category;
import KirisShygys.entity.User;
import KirisShygys.entity.enums.TransactionType;
import KirisShygys.exception.NotFoundException;
import KirisShygys.exception.UnauthorizedException;
import KirisShygys.repository.CategoryRepository;
import KirisShygys.repository.UserRepository;
import KirisShygys.service.CategoryService;
import KirisShygys.util.JwtUtil;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class CategoryServiceImpl extends TransactionEntityService<Category, Long> implements CategoryService {

    private final CategoryRepository categoryRepository;

    public CategoryServiceImpl(CategoryRepository categoryRepository, UserRepository userRepository, JwtUtil jwtUtil) {
        super(categoryRepository, "Category", userRepository, jwtUtil);
        this.categoryRepository = categoryRepository;
    }

    @Override
    public List<Category> getCategories(String token) {
        User user = getAuthenticatedUser(token);
        List<Category> categories = categoryRepository.findByUser(user);
        return categories.stream()
                .filter(category -> category.getParentCategory() == null)
                .filter(category -> !category.isDeleted())
                .toList();
    }

    @Override
    public Category getCategoryById(String token, Long id) {
        User user = getAuthenticatedUser(token);
        Category category = categoryRepository.findByIdAndUser(id, user)
                .orElseThrow(() -> new NotFoundException("Category with ID " + id + " not found"));
        if (category.isDeleted()) {
            throw new NotFoundException("Category with ID " + id + " not found");
        }
        return category;
    }

    @Transactional
    public Category createCategory(String token, CategoryRequest request) {
        User user = getAuthenticatedUser(token);
        Category category = new Category();
        category.setNameRu(request.getNameRu());
        category.setNameKz(request.getNameKz());
        category.setNameEn(request.getNameEn());
        category.setIcon(request.getIcon());
        category.setType(request.getType());
        category.setUser(user);
        category.setSystem(false);
        if (request.getParentCategoryId() != null) {
            Category parentCategory = categoryRepository.findById(request.getParentCategoryId())
                    .orElseThrow(() -> new NotFoundException("Parent category not found"));
            if (!parentCategory.getUser().equals(user)) {
                throw new UnauthorizedException("Parent category does not belong to the user");
            }
            if (parentCategory.getParentCategory() != null) {
                throw new IllegalArgumentException("Nested subcategories (grandchildren) are not allowed.");
            }
            category.setParentCategory(parentCategory);
        }
        return categoryRepository.save(category);
    }

    @Override
    @Transactional
    public Category updateCategory(String token, Long id, CategoryRequest request) {
        User user = getAuthenticatedUser(token);
        Category existingCategory = categoryRepository.findByIdAndUser(id, user)
                .orElseThrow(() -> new NotFoundException("Category with ID " + id + " not found"));
        if (existingCategory.isSystem()) {
            throw new UnsupportedOperationException("Category 'Without category' cannot be edited");
        }
        existingCategory.setNameRu(request.getNameRu());
        existingCategory.setNameKz(request.getNameKz());
        existingCategory.setNameEn(request.getNameEn());
        existingCategory.setType(request.getType());
        existingCategory.setIcon(request.getIcon());
        if (request.getParentCategoryId() != null) {
            Category parentCategory = categoryRepository.findById(request.getParentCategoryId())
                    .orElseThrow(() -> new NotFoundException("Parent category not found"));
            if (!parentCategory.getUser().equals(user)) {
                throw new UnauthorizedException("Parent category does not belong to the user");
            }
            if (parentCategory.getParentCategory() != null) {
                throw new IllegalArgumentException("Nested subcategories (grandchildren) are not allowed.");
            }
            existingCategory.setParentCategory(parentCategory);
        } else {
            existingCategory.setParentCategory(null);
        }
        return categoryRepository.save(existingCategory);
    }

    @Transactional
    public void deleteCategory(String token, Long categoryId) {
        User user = getAuthenticatedUser(token);
        Category category = categoryRepository.findByIdAndUser(categoryId, user)
                .orElseThrow(() -> new NotFoundException("Category not found"));
        if (category.isSystem()) {
            throw new UnsupportedOperationException("Cannot remove the 'Uncategorized' category");
        }
        categoryRepository.findByUser(user).stream()
                .filter(c -> category.equals(c.getParentCategory()))
                .forEach(sub -> {
                    sub.setDeleted(true);
                    categoryRepository.save(sub);
                });
        category.setDeleted(true);
        categoryRepository.save(category);
    }

    @Override
    @Transactional
    public void createDefaultCategories(User user) {
        categoryRepository.save(create("–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–°–∞–Ω–∞—Ç—Å—ã–∑", "Uncategorized", "üö´", TransactionType.EXPENSE, user, null, true));
        Map<String, Category> parentMap = new HashMap<>();
        List<Category> parents = List.of(
                create("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã", "–ú–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–∫ —Ç”©–ª–µ–º–¥–µ—Ä", "Government Payments", "üèõÔ∏è", TransactionType.INCOME, user, null, false),
                create("–í–æ–∑–≤—Ä–∞—Ç—ã", "“ö–∞–π—Ç–∞—Ä—ã–º–¥–∞—Ä", "Returns", "üîÑ", TransactionType.INCOME, user, null, false),
                create("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö”©–ª—ñ–∫", "Transport", "üöó", TransactionType.EXPENSE, user, null, false),
                create("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "“ö–∞—Ä–∂—ã–ª—ã“õ –º—ñ–Ω–¥–µ—Ç—Ç–µ–º–µ–ª–µ—Ä", "Financial Obligations", "üí≥", TransactionType.EXPENSE, user, null, false)
        );
        for (Category parent : parents) {
            categoryRepository.save(parent);
            parentMap.put(parent.getNameRu(), parent); // –∫–ª—é—á - nameRu
        }
        List<Category> categories = List.of(
                create("–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ñ–∞–ª–∞“õ—ã", "Salary", "üíº", TransactionType.INCOME, user, null, false),
                create("–°—Ç–∏–ø–µ–Ω–¥–∏—è", "–°—Ç–∏–ø–µ–Ω–¥–∏—è", "Scholarship", "üéì", TransactionType.INCOME, user, parentMap.get("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"), false),
                create("–ü–æ—Å–æ–±–∏–µ", "–ñ”ô—Ä–¥–µ–º–∞“õ—ã", "Benefit", "üì©", TransactionType.INCOME, user, parentMap.get("–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"), false),
                create("–ü–æ–¥–∞—Ä–∫–∏", "–°—ã–π–ª—ã“õ—Ç–∞—Ä", "Gifts", "üéÅ", TransactionType.INCOME, user, null, false),
                create("–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "–ü–∞—Å—Å–∏–≤ —Ç–∞–±—ã—Å", "Passive Income", "üè†", TransactionType.INCOME, user, null, false),
                create("–ù–∞–ª–æ–≥–∏", "–°–∞–ª—ã“õ—Ç–∞—Ä", "Taxes", "üí∏", TransactionType.INCOME, user, parentMap.get("–í–æ–∑–≤—Ä–∞—Ç—ã"), false),
                create("–î–æ–ª–≥–∏", "“ö–∞—Ä—ã–∑–¥–∞—Ä", "Debts", "üîÅ", TransactionType.INCOME, user, parentMap.get("–í–æ–∑–≤—Ä–∞—Ç—ã"), false),
                create("–ö—ç—à–±—ç–∫ / –ë–æ–Ω—É—Å—ã", "–ö—ç—à–±—ç–∫ / –ë–æ–Ω—É—Å—Ç–∞—Ä", "Cashback / Bonuses", "üéâ", TransactionType.INCOME, user, null, false),
                create("–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", "–ê–∑—ã“õ-—Ç“Ø–ª—ñ–∫", "Groceries", "üçé", TransactionType.EXPENSE, user, null, false),
                create("–ê—Ä–µ–Ω–¥–∞", "–ñ–∞–ª–¥–∞—É", "Rent", "üè†", TransactionType.EXPENSE, user, null, false),
                create("–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–ö–æ–º–º—É–Ω–∞–ª–¥—ã“õ “õ—ã–∑–º–µ—Ç—Ç–µ—Ä", "Utilities", "üí°", TransactionType.EXPENSE, user, null, false),
                create("–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ú–æ–±–∞–π–ª / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "Mobile / Internet", "üì∂", TransactionType.EXPENSE, user, null, false),
                create("–ó–¥–æ—Ä–æ–≤—å–µ", "–î–µ–Ω—Å–∞—É–ª—ã“õ", "Health", "üíä", TransactionType.EXPENSE, user, null, false),
                create("–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥", "–°“±–ª—É–ª—ã“õ –∂”ô–Ω–µ –∫“Ø—Ç—ñ–º", "Beauty & Care", "üíÖ", TransactionType.EXPENSE, user, null, false),
                create("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ / –ö—É—Ä—Å—ã", "–ë—ñ–ª—ñ–º / –ö—É—Ä—Å—Ç–∞—Ä", "Education / Courses", "üìö", TransactionType.EXPENSE, user, null, false),
                create("–ü–æ–¥–ø–∏—Å–∫–∏", "–ñ–∞–∑—ã–ª—ã–º–¥–∞—Ä", "Subscriptions", "üì∫", TransactionType.EXPENSE, user, null, false),
                create("–ü–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–≥–∏–º", "–ë–∞—Å“õ–∞–ª–∞—Ä“ì–∞ —Å—ã–π–ª—ã“õ—Ç–∞—Ä", "Gifts to Others", "üéÅ", TransactionType.EXPENSE, user, null, false),
                create("–¢–∞–∫—Å–∏", "–¢–∞–∫—Å–∏", "Taxi", "üöï", TransactionType.EXPENSE, user, parentMap.get("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), false),
                create("–ë–µ–Ω–∑–∏–Ω", "–ë–µ–Ω–∑–∏–Ω", "Gasoline", "‚õΩ", TransactionType.EXPENSE, user, parentMap.get("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"), false),
                create("–ö—Ä–µ–¥–∏—Ç—ã", "–ù–µ—Å–∏–µ", "Credits", "üí≥", TransactionType.EXPENSE, user, parentMap.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"), false),
                create("–î–æ–ª–≥–∏", "“ö–∞—Ä—ã–∑–¥–∞—Ä", "Debts", "üìâ", TransactionType.EXPENSE, user, parentMap.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"), false),
                create("–ù–∞–ª–æ–≥–∏", "–°–∞–ª—ã“õ—Ç–∞—Ä", "Taxes", "üíµ", TransactionType.EXPENSE, user, parentMap.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"), false)
        );
        categoryRepository.saveAll(categories);
    }

    private Category create(String nameRu, String nameKz, String nameEn, String icon, TransactionType type, User user, Category parent, Boolean isSystem) {
        Category category = new Category();
        category.setNameRu(nameRu);
        category.setNameKz(nameKz);
        category.setNameEn(nameEn);
        category.setIcon(icon);
        category.setType(type);
        category.setUser(user);
        category.setParentCategory(parent);
        category.setSystem(isSystem);
        return category;
    }
}
